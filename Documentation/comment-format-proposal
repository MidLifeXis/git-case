# Abstract

Comments will be stored in `cases:<caseid>/comments/<commentid>`, they
will likely resemble emails, they will be threaded.

# Suggested approach

Mailing lists are a natural way of communicating.  The comments will be
viewed as email.  They will be linked in a tree structure based on the
reply-to relationship.

 - comments are email
   * comments can originate from email, and are sent out as email; for
     all intents and purposes, comments are email.
   * RFC2822 header/body
   * comments are not mutable as they are addressable by their hash
   * comments do not contains attachments, but can be linked to files

 - comments have attributes (header fields)
   * mandatory attributes
     - Date: when it was created
     - From: author of comment
   * attributes for comments originated from emails, taken verbatim
     - To: email
     - Cc: email
     - Subject: text
     - Message-Id: messageid from imported emails
     - In-Reply-To: messageid
     - References: one or more messageid's
   * attributes to handle attachments:
     - Attachment: <blob-hash> [<filename>]

 - rules for messageid's
   * all comments have message IDs which are used for threading
   * messageid's are only generated by git-case when the comments are
     created by git-case
   * messageid's are retained from original emails at import time

*NOTE* `Attachment` is not transfered via email, it is MIME encoded
and attached to the email that is exported.

# comment storage

We want the comments to form a threaded discussion, like on mailing
lists.  On mailing lists, the threaded is dictated by `In-Reply-To` and
`References` header fields.  In a git store the natural way to reference
a comment would be to access it by it's hash.

## comment body

A git-case generated comment looks like this:

    Date: Tue Apr 15 20:26:18 2008 -0400
    From: fred@example.com
    
    Comments need to be threaded.

The comment hashes down to `2e122df60a36e37bfde941cdaf1d073f1624b70b`
and so it will be stored in:

    cases:<caseid>/comments/2e122d...

When git-case-export sends the above email out it will generate a
Message-Id based on the hash.  If the hostname is bugs.domain.tld, it
will be:

    <git-case-comment-2e122df60a36e37bfde941cdaf1d073f1624b70b@bugs.domain.tld>

Say we import a reply from the mailing list.  This comment will be
stored as:

    Date: Tue Apr 15 20:26:18 2008 -0400
    From: bob@example.com
    Message-Id: <SOMETHING-002@bugs.example.com>
    To: bugs@example.com
    In-Reply-To: <git-case-comment-2e122df60a36e37bfde941cdaf1d073f1624b70b@bugs.example.com>
    Subject: Re: [BUG abcdef] we love comments
    
    Fred, sure... as long as they have valid references.

Note that the Message-Id of this comment was obtained from the email.
This comment is stored in:

    cases:<caseid>/comments/df1c46f090d48be648d613f5575c37ed7123d39e

## content keyed access

Knowing the hash of the comment we seek we can lookup the comment
directly from git

    git cat-file blob df1c46f090d48be648d613f5575c37ed7123d39e

## indexed access

In addition to accessing messages by the hash, it's also possible to get
at the data in timestamp order or by the Message-Id.  In both cases the
store allows for non-unique keys:

    cases:<caseid>/comments/by-message-id/<messageid>/<commentid>
    cases:<caseid>/comments/by-timestamp/<timestamp>/<commentid>

# future improvements for threading

We now have a problem: we have to read all comments when we want to
display a threaded list.  That is because we need to pull out the
`Message-Id` and the `In-Reply-To` header fields in order to construct
the graph.  This is going to be very inefficient.

Here are some proposed alternatives:

## cached index of comment relationships

This could be stored in a file that gets updated locally when comments
change for a case.  It would speed up subsequent displays of comments.
Most gain will been seen on systems that do many reads and few writes;
like a web UI.

Stored in `.git/case/comment-index-<caseid>` and contains a binary fine
containing a structure that can be traversed in date order or (with
another set of links) by threaded relationships.  The data at each link
would be the sha1 sum to follow to get to the comment.

This file *never* gets shared with other repositories.








vim: set ts=8 et sw=8 tw=72 ft=mkd
