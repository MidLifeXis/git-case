#!/bin/bash
#
# Assumptions:
#  - in a git repository
#  - we can access git-case-common
#  - the branch defined by GIT_CASE_HEAD exists (see git-case-common)

source $(dirname $0)/git-case-common

SHOW_FILES=true
SHOW_IDS=false
SHOW_COMMENTS=true

while test "${1:0:1}" = "-" ; do
        case "$1" in
                --files)        SHOW_FILES=true ;;
                --no-files)     SHOW_FILES=false ;;
                --ids)          SHOW_IDS=true ;;
                --no-ids)       SHOW_IDS=false ;;
                --comments)     SHOW_COMMENTS=true ;;
                --no-comments)  SHOW_COMMENTS=false ;;
                --*)
                        die "usage: $PROGRAM [--comments|--no-comments] [--ids|--no-ids] [--files|--no-files] <caseid>"
                        ;;
        esac
        shift
done

ID=$1
if test -z "$ID" ; then
        ID=$(cat "$GIT_CASE_ACTIVE" 2>/dev/null || true)
        test -z "$ID" && die "no active case set"
fi
ID=$(git ls-tree $GIT_CASE_HEAD | awk "/\t${ID}[a-fA-F0-9]*$/"'{ print $4 }')
shortID=$(gen_short_case_id "$ID")

CASE_ROOT="$GIT_CASE_HEAD:${ID}"


desc=$(git show "$CASE_ROOT/description" 2>/dev/null || true)
test -z "$desc" && die "active case is not valid"

cdate=$(git show "$CASE_ROOT/created" 2>/dev/null || true)
ctype=$(git show "$CASE_ROOT/type" 2>/dev/null || true)
state=$(git show "$CASE_ROOT/state" 2>/dev/null || true)
assig=$(git show "$CASE_ROOT/assigned" 2>/dev/null || true)
found=$(git show "$CASE_ROOT/found" 2>/dev/null || true)

found=$(git log -1 --pretty=oneline --abbrev-commit "$found" || echo "$found")

mine=""
if test "$assig" = "$GIT_COMMITTER_NAME <$GIT_COMMITTER_EMAIL>" \
                -o "$assig" = "$GIT_COMMITTER_EMAIL" ; then
        mine="$bold$blue"
elif test -z "$assig" ; then
        mine="$bold$black"
        assig="(nobody)"
fi

echo -e "Case ID:     $bold$blue$shortID$reset ($white$ID$reset)"
echo -e "Description: $yellow$desc$reset"
echo    "Created on:  $cdate"
echo    "Type:        $ctype"
echo    "State:       $state"
echo -e "Assigned to: $mine$assig$reset"
echo    "Found in:    $found"

MARKS=$(git ls-tree $GIT_CASE_HEAD "$ID/marks/" | awk -F/ '{ print $3 }' | xargs)
test -n "$MARKS" && echo "Marks:       $MARKS"

FIELDS=$(git ls-tree $GIT_CASE_HEAD "$ID/fields/" | awk -F/ '{ print $3 }' | xargs)
if test -n "$FIELDS" ; then
        echo
        echo "Fields..."
        git ls-tree $GIT_CASE_HEAD -- "$ID/fields/" \
        | while read mode type object file ; do
                if test $type = blob ; then
                        short=${file##*/}:
                        printf "  * %-10s" $short
                        git cat-file blob $object | sed 's/^/      /'
                fi
        done
fi

if $SHOW_FILES ; then
        HAVE_FILES=$(git ls-tree $GIT_CASE_HEAD -- "$ID/files")
        if test -n "$HAVE_FILES" ; then
                echo
                echo "Files..."
                git ls-tree -r $GIT_CASE_HEAD -- "$ID/files/" \
                | grep ' blob ' \
                | while read mode type object file; do
                        name_and_hash=${file#*/*/}
                        name=${name_and_hash%%/*}
                        sha1=${name_and_hash#*/}
                        echo -e "  * $bold$black""$sha1  $reset""$name"
                done
        fi
fi

if $SHOW_IDS ; then
        HAVE_IDS=$(git ls-tree $GIT_CASE_HEAD -- "$ID/ids")
        if test -n "$HAVE_IDS" ; then
                good=$(echo good | git hash-object -t blob --stdin)
                echo
                echo "IDs..."
                git ls-tree $GIT_CASE_HEAD -- "$ID/ids/" \
                | grep ' blob ' \
                | while read mode type object file ; do
                        if test "$object" = "$good" ; then
                                echo -e "  good $green$object$reset"
                        else
                                echo -e "  bad  $red$object$reset"
                        fi
                done
        fi
fi

if $SHOW_COMMENTS ; then
        HAVE_COMMENTS=$(git ls-tree $GIT_CASE_HEAD -- "$ID/comments")
        if test -n "$HAVE_COMMENTS" ; then
                echo
                echo "Comments..."
                git ls-tree $GIT_CASE_HEAD -- "$ID/comments/" \
                | grep ' blob ' \
                | while read mode type object file ; do
                        if test "$header_done" != no ; then
                                header_done=yes
                        fi
                        print_pretty_comment "$file" "$object"
                done
        fi
fi
